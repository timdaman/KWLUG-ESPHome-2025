substitutions:
  name: 6-http-call
  friendly_name: 6-http-call

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  min_version: 2024.6.0
  platformio_options:
    board_build.mcu: esp32c3
    board_build.variant: esp32c3
    board_build.flash_mode: dio

esp32:
  board: esp32-c3-devkitm-1
  flash_size: 4MB
  variant: ESP32C3
  framework:
    type: arduino
    version: recommended

api:
  encryption:
    key: tu5mp4BZuW5EqX5JXkd+Ln3naFT1CStzMuE6VtVhekE=
  reboot_timeout: 0s # Prevent reboots when unmanaged

wifi: !secret wifi  # Makes demo smoother

ota:
  - platform: esphome



logger:
  level: DEBUG

web_server:

http_request:
  verify_ssl: false

script:
  - id: check_weather
    then:
      - logger.log: "Starting connection"
      - http_request.get:
          url: "https://wttr.in/?format=%f"
          capture_response: true
          on_response:
            then:
              - logger.log:
                  format: "Response status: %d, Duration: %u ms, Body %s %x"
                  args:
                    - response->status_code
                    - response->duration_ms
                    - body
                    - body
              - text_sensor.template.publish:
                  id: raw_text
                  state: !lambda 'return body;'
          on_error:
            then:
              - logger.log: "Request failed!"
      - logger.log: "DONE"


text_sensor:
  - platform: template
    name: "Raw text"
    id: raw_text
  - platform: copy
    name: "Feels like text"
    source_id: raw_text
    id: feels_like_text
    filters: 
        - lambda: |-
            std::string suffixToRemove = "°C";
            size_t pos = x.find(suffixToRemove);
            x.erase(pos);
            return x;
    on_value: 
      then:
        - sensor.template.publish:
            id: feels_like
            state: !lambda 'return stof(x);'

sensor:
  - platform: template
    id: feels_like
    name: "Feels like"
    on_value:
      - logger.log: "Feels like updated"
      - if:
          condition:
            lambda: 'return id(activation_temperature).state < id(feels_like).state;'
          then:
            - switch.turn_on: relay
          else:
            - switch.turn_off: relay

button:
  - platform: template
    name: "Get Weather"
    on_press:
        - script.execute: check_weather
switch:
  - platform: gpio
    name: Switch
    pin: GPIO05
    id: relay

number:
  - platform: template
    name: "Activation temperature"
    id: activation_temperature
    optimistic: true
    restore_value: true
    min_value: -10
    max_value: 40
    unit_of_measurement: "°C"
    mode: "box"
    step: 1
  
interval: 
   - interval: 1min
     then:
      - script.execute: check_weather
